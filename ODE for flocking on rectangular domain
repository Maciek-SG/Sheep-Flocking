# -*- coding: utf-8 -*-
"""
Created on Sat Jan  8 12:36:18 2022

@author: Junior
"""

import numpy as np
import math
import matplotlib.pyplot as plt

xdim = 1000
ydim = 800

def V(r):           #repulsion at short distances, attraction at long (cohesion)
    return 3.5*(r+5)*math.log((r+5)/20)*np.exp(-((r+5)/25)**2)

    
def phi(r):         #positive everywhere and goes to 0 as r gets large - alignement 
    return (2.1*(0.2*r -0.4)**4)/np.exp(0.2*r -0.4)

def h1(lst):
    return lst[0] 
def h2(lst):
    return lst[1] 
def h3(lst):
    return xdim - lst[0]
def h4(lst):
    return ydim - lst[1]

def omega(x):     #gets larger the closer you get to 0 (closer sheep gets to wall)
    return 8*np.exp(-0.1*x)

def wall(x):     #determines which walls are affecting the sheep and gives the resultant force to make sheep turn away
    w1 = [omega(h1(x)),0]
    w2 = [0,omega(h2(x))]
    w3 = [-omega(h3(x)),0]
    w4 = [0,-omega(h4(x))]
    total = np.array([w1,w2,w3,w4])
    totalsum = total.sum(axis=0)
    return totalsum

def acceleration(x,v):     
    n = len(x)
    accelerationlist = []
    for i in range(n):
        w = wall(x[i])
        a= np.zeros(2)
        for j in range(n):
            if i == j:
                pass 
            else:
                r = np.linalg.norm(x[i]-x[j]) #the distance between i^th and j^th sheep
                
                a = np.add(a,(1/n)*phi(r)*np.add(v[i],v[j])) #alignement
                a = np.add(a,(1/n)*V(r)*(np.subtract(x[j],x[i])/r)) #repulsion/attraction
                a = np.add(a,w) #wall force
        accelerationlist.append(a)
    return accelerationlist



def velocitycap(v): #takes all the velocities and ensures |v|<= 1
    n = len(v)
    for i in range(n):
        magnitude = np.linalg.norm(v[i])
        if magnitude <= 1:
            pass
        else:
            v[i] = (v[i] / magnitude)*1
    return v #returns the velocities which now all have magnitude <= 1

###### TESTING SECTION ######
def avg_pos(x):    # the average position of the flock    
    return np.sum(x, axis=0)/len(x)

def avg_vel(x):    # the average velocity of the flock
    return np.sum(x, axis=0)
def nearestneighbour(a,x,i): #distance to closest sheep
    x = np.delete(x,i, axis = 0)    #gets rid of current vector in list to avoid getting 0 distance
    n = len(x)
    distances = []       # list filled with ther distances from a to ith vector
    for i in range(n):
        distances.append(np.linalg.norm(np.subtract(x[i],a)))
    distances = np.sort(distances)
    return [distances[0],distances[1]]   
def expanse(x):
    n = len(x)
    avg = avg_pos(x)
    ans = 0
    for i in range(n):
        ans += np.linalg.norm(np.subtract(avg,x[i]))
    
    return (ans / n)   #/ ((xdim**2 +ydim**2)**0.5)/2
def NND(x):    # the nearest neighbour distance, or homogeneity
    n = len(x)
    n1 = 0
    n2 = 0
    for i in range(n):
        val = nearestneighbour(x[i],x,i)
        n1 += val[0]
        n2 += val[1]
    n1 = n1 / n
    n2 = n2 / n
    return (n2-n1) #/ (xdim**2 +ydim**2)**0.5
def polarisation(x):
    n = len(x)
    avg = avg_vel(x)
    ans = []
    
    for i in range(n):
        cosangle = np.dot(avg,x[i])/np.linalg.norm(x[i])/np.linalg.norm(avg)
        angle = np.arccos(cosangle)
        ans.append(angle)
        
    ans = np.sum(ans, axis=0)/n
    return  np.degrees(ans) #/ 90
    

##### TESTING SECTION FINISHED ######

def iterations(x,v,t): #time iterations     
    timelist = []
    NNDlist =[]
    expanselist = []
    polarisationlist =[]    
    for i in range(t):
        x = np.add(x,velocitycap(v))
        v = np.add(v,acceleration(x,v))
        
        # if i%10 == 0:    # comment out if just want to show positions of sheep
        #     timelist.append(i)
        #     NNDlist.append(NND(x))
        #     expanselist.append(expanse(x))
        #     polarisationlist.append(polarisation(velocitycap(v)))
        
            
    return x , velocitycap(v), timelist, NNDlist, expanselist, polarisationlist
              

x=np.array() #the positions of the sheep
v=np.array() #the velocities of the sheep

t = 0 #NUMBER OF TIME-STEPS

result = iterations(x,v,t)
finalpositions = result[0]
finalvelocities = result[1]
timelist = result[2]
NNDlist = result[3]
expanselist = result[4]
polarisationlist = result[5]


n=len(x)
x=[]
y=[]
for i in range(n):
    x.append(finalpositions[i][0])
    y.append(finalpositions[i][1])



plt.figure(0)    
plt.scatter(x,y)
plt.ylim(0,xdim)
plt.xlim(0,xdim)
plt.show()

# print(timelist)
# print(NNDlist)
# print(expanse(finalpositions))

### GRAPHING THE STRENGTH OF FLOCKING ###

# plt.figure(1)
# plt.scatter(timelist,NNDlist, color = 'blue')
# plt.title("Homogeneity")
# plt.xlabel("Time-steps")
# plt.ylabel("homogeneity")
# plt.show()

# plt.figure(2)
# plt.scatter(timelist,expanselist ,color = 'red')
# plt.title("Compactness")
# plt.xlabel("Time-steps")
# plt.ylabel("expanse")
# plt.show()

# plt.figure(3)
# plt.scatter(timelist,polarisationlist , color = 'green')
# plt.title("Coordination")
# plt.xlabel("Time-steps")
# plt.ylabel("polarisation")
# plt.ylim(0,90)
# plt.show()


#def KineticEnergy(v): #K-E of the flock, largely useless since we take velocities to be homogeneous, but if you want to change this, KE could be useful to test.
    n = len(v)
    v = np.sum(v,axis=0)
    v = v/n
    
    v = np.dot(v,v)
    return 0.5 * v

# print("average K.E is",KineticEnergy(finalvelocities))





print("polarisation",polarisation(finalvelocities))
print("expanse",expanse(finalpositions))
print("homogeneity",NND(finalpositions))

    
